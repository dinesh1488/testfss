# Optionally override the fully qualified name
fullnameOverride: ""
# Optionally override the name
nameOverride: ""
# The number of replicas to create
replicas: 1
image:
  # The Keycloak image repository
  repository: us.icr.io/vz-genai/keycloak
  # Overrides the Keycloak image tag
  tag: "vul-23"
  # The Keycloak image pull policy
  pullPolicy: Always
# Image pull secrets for the Pod
imagePullSecrets:
  - name: jpuv-onartifactory-ci-west
# Pod management policy
podManagementPolicy: OrderedReady
updateStrategy: RollingUpdate
restartPolicy: Always
serviceAccount:
  create: true
  name: tme-keycloak-service-account
  annotations: {}
  imagePullSecrets:
    - name: jpuv-onartifactory-ci-west
  automountServiceAccountToken: true
rbac:
  create: false
  rules: []
# SecurityContext for the Pod
podSecurityContext:
  runAsNonRoot: true
  seccompProfile:
    type: RuntimeDefault
  fsGroup: 1000
# SecurityContext for the Keycloak container
securityContext:
  runAsUser: 1000
  runAsNonRoot: true
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  seccompProfile:
    type: RuntimeDefault
terminationGracePeriodSeconds: 60
clusterDomain: cluster.local
command: []
args: []
# Additional environment variables for Keycloak
extraEnv: []
  # - name: KC_LOG_LEVEL
  # value: DEBUG
# Pod priority class name
priorityClassName: ""
# Pod affinity
affinity: |
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchLabels:
            {{- include "keycloak.selectorLabels" . | nindent 10 }}
        topologyKey: kubernetes.io/hostname
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchLabels:
              {{- include "keycloak.selectorLabels" . | nindent 12 }}
          topologyKey: topology.kubernetes.io/zone
nodeSelector: {}
tolerations: []
podLabels: {}
podAnnotations: {}
# Health probes configuration
livenessProbe: |
  httpGet:
    path: '/auth/health/live'
    port: http
  initialDelaySeconds: 30
  timeoutSeconds: 5
readinessProbe: |
  httpGet:
    path: '/auth/health/ready'
    port: http
  initialDelaySeconds: 10
  timeoutSeconds: 1
startupProbe: |
  httpGet:
    path: '/auth/health'
    port: http
  initialDelaySeconds: 15
  timeoutSeconds: 1
  failureThreshold: 60
  periodSeconds: 5
resources:
  requests:
    cpu: "250m"
    memory: "512Mi"
  limits:
    cpu: "500m"
    memory: "1Gi"
service:
  type: ClusterIP
  httpPort: 8080
  httpsPort: 8443
  annotations: {}
  labels: {}
  extraPorts: []
# GKE Ingress configuration
ingress:
  enabled: true
  ingressClassName: "gce"
  servicePort: http
  annotations:
    kubernetes.io/ingress.class: "gce"
    kubernetes.io/ingress.allow-http: "false"
  rules:
    - host: '{{ .Values.global.ingress }}'
      http:
        paths:
          - path: /auth
            pathType: Prefix
  tls:
    - hosts:
        - '{{ .Values.global.ingress }}'
      secretName: anp-gcp-tls-secret
route:
  enabled: false
database:
  vendor: postgres
  hostname: vz-ibm-genai-postgresql
  port: 5432
  database: keycloak
  username: keycloak
  password: keyclo@kAIW
  existingSecret: ""
cache:
  stack: default
proxy:
  enabled: true
  mode: edge
metrics:
  enabled: true
http:
  relativePath: "/auth"

# PostgreSQL Subchart Configuration
postgresql:
  serviceAccount:
    create: true
    name: tme-postgresql-service-account
    imagePullSecrets:
      - name: jpuv-onartifactory-ci-west
  image:
    registry: us.icr.io
    repository: vz-genai/postgressql
    tag: v100
    pullPolicy: IfNotPresent
    pullSecrets:
      - name: jpuv-onartifactory-ci-west
  auth:
    enablePostgresUser: true
    postgresPassword: "yMu1RfMtLF5tNir9"
    username: "keycloak"
    password: "keyclo@kAIW"
    database: "keycloak"
  architecture: standalone
  primary:
    persistence:
      enabled: true
      existingClaim: "vz-ibm-genai-postgresql"
      storageClass: "standard"
      accessModes:
        - ReadWriteOnce
      size: 8Gi
    service:
      type: ClusterIP
      ports:
        postgresql: 5432
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      limits: {}
  rbac:
    create: true
    rules:
      - apiGroups: [""]
        resources: ["pods", "services"]
        verbs: ["get", "list", "watch"]