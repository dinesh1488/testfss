## @section Global parameters
global:
  imagePullSecrets:
    - name: jpuv-onartifactory-ci-west
  storageClass: "standard"
  postgresql:
    auth:
      postgresPassword: "yMu1RfMtLF5tNir9"
      username: "keycloak"
      password: "keyclo@kAIW"
      database: "keycloak"

## @section Common parameters
kubeVersion: ""
nameOverride: ""
fullnameOverride: ""
clusterDomain: cluster.local
extraDeploy: []
commonLabels: {}
commonAnnotations: {}
diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity

## @section PostgreSQL common parameters
image:
  registry: us.icr.io
  repository: vz-genai/postgressql
  tag: v100
  digest: ""
  pullPolicy: IfNotPresent
  pullSecrets:
    - name: jpuv-onartifactory-ci-west
  debug: false

## Authentication parameters
auth:
  enablePostgresUser: true
  postgresPassword: "yMu1RfMtLF5tNir9"
  username: "keycloak"
  password: "keyclo@kAIW"
  database: "keycloak"
  replicationUsername: repl_user
  replicationPassword: ""
  existingSecret: ""
  secretKeys:
    adminPasswordKey: postgres-password
    userPasswordKey: password
    replicationPasswordKey: replication-password
  usePasswordFiles: false

## @param architecture PostgreSQL architecture (`standalone` or `replication`)
architecture: standalone

## Replication configuration
replication:
  synchronousCommit: "off"
  numSynchronousReplicas: 0
  applicationName: my_application

## @param containerPorts.postgresql PostgreSQL container port
containerPorts:
  postgresql: 5432

## Audit settings
audit:
  logHostname: false
  logConnections: false
  logDisconnections: false
  pgAuditLog: ""
  pgAuditLogCatalog: "off"
  clientMinMessages: error
  logLinePrefix: ""
  logTimezone: ""

## LDAP configuration
ldap:
  enabled: false
  server: ""
  port: ""
  prefix: ""
  suffix: ""
  basedn: ""
  binddn: ""
  bindpw: ""
  searchAttribute: ""
  searchFilter: ""
  scheme: ""
  tls:
    enabled: false
  uri: ""

## @param postgresqlDataDir PostgreSQL data dir folder
postgresqlDataDir: /bitnami/postgresql/data

## @param postgresqlSharedPreloadLibraries Shared preload libraries (comma-separated list)
postgresqlSharedPreloadLibraries: "pgaudit"

## Start PostgreSQL pod(s) without limitations on shm memory
shmVolume:
  enabled: true
  sizeLimit: ""

## TLS configuration
tls:
  enabled: false
  autoGenerated: false
  preferServerCiphers: true
  certificatesSecret: ""
  certFilename: ""
  certKeyFilename: ""
  certCAFilename: ""
  crlFilename: ""

## @section PostgreSQL Primary parameters
primary:
  name: primary
  configuration: ""
  pgHbaConfiguration: ""
  existingConfigmap: ""
  extendedConfiguration: ""
  existingExtendedConfigmap: ""
  initdb:
    args: ""
    postgresqlWalDir: ""
    scripts: {}
    scriptsConfigMap: ""
    scriptsSecret: ""
    user: ""
    password: ""
  standby:
    enabled: false
    primaryHost: ""
    primaryPort: ""
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  command: []
  args: []
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  startupProbe:
    enabled: false
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  lifecycleHooks: {}
  resources:
    limits: {}
    requests:
      memory: 256Mi
      cpu: 250m
  podSecurityContext:
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  containerSecurityContext: {}
  hostAliases: []
  hostNetwork: false
  hostIPC: false
  labels: {}
  annotations: {}
  podLabels: {}
  podAnnotations: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  topologySpreadConstraints: []
  priorityClassName: ""
  schedulerName: ""
  terminationGracePeriodSeconds: ""
  updateStrategy:
    type: RollingUpdate
    rollingUpdate: {}
  extraVolumeMounts: []
  extraVolumes: []
  sidecars: []
  initContainers: []
  extraPodSpec: {}
  service:
    type: ClusterIP
    ports:
      postgresql: 5432
    nodePorts:
      postgresql: ""
    clusterIP: ""
    annotations: {}
    loadBalancerIP: ""
    externalTrafficPolicy: Cluster
    loadBalancerSourceRanges: []
    extraPorts: []
    sessionAffinity: None
    sessionAffinityConfig: {}
    headless:
      annotations: {}
  persistence:
    enabled: true
    existingClaim: "vz-ibm-genai-postgresql"
    mountPath: /bitnami/postgresql
    subPath: ""
    storageClass: "standard"
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    annotations: {}
    labels: {}
    selector: {}
    dataSource: {}

## @section PostgreSQL read only replica parameters
readReplicas:
  name: read
  replicaCount: 1
  extendedConfiguration: ""
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  command: []
  args: []
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  startupProbe:
    enabled: false
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  lifecycleHooks: {}
  resources:
    limits: {}
    requests:
      memory: 256Mi
      cpu: 250m
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
  hostAliases: []
  hostNetwork: false
  hostIPC: false
  labels: {}
  annotations: {}
  podLabels: {}
  podAnnotations: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  topologySpreadConstraints: []
  priorityClassName: ""
  schedulerName: ""
  terminationGracePeriodSeconds: ""
  updateStrategy:
    type: RollingUpdate
    rollingUpdate: {}
  extraVolumeMounts: []
  extraVolumes: []
  sidecars: []
  initContainers: []
  extraPodSpec: {}
  service:
    type: ClusterIP
    ports:
      postgresql: 5432
    nodePorts:
      postgresql: ""
    clusterIP: ""
    annotations: {}
    loadBalancerIP: ""
    externalTrafficPolicy: Cluster
    loadBalancerSourceRanges: []
    extraPorts: []
    sessionAffinity: None
    sessionAffinityConfig: {}
    headless:
      annotations: {}
  persistence:
    enabled: true
    existingClaim: ""
    mountPath: /bitnami/postgresql
    subPath: ""
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 5Gi
    annotations: {}
    labels: {}
    selector: {}
    dataSource: {}

## @section NetworkPolicy parameters
networkPolicy:
  enabled: false
  metrics:
    enabled: false
    namespaceSelector: {}
    podSelector: {}
  ingressRules:
    primaryAccessOnlyFrom:
      enabled: false
      namespaceSelector: {}
      podSelector: {}
      customRules: {}
    readReplicasAccessOnlyFrom:
      enabled: false
      namespaceSelector: {}
      podSelector: {}
      customRules: {}
  egressRules:
    denyConnectionsToExternal: false
    customRules: {}

## @section Volume Permissions parameters
volumePermissions:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: 11-debian-11-r86
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  resources:
    limits: {}
    requests: {}
  containerSecurityContext:
    runAsUser: 0

## @section Other Parameters
serviceBindings:
  enabled: false

## Service account for PostgreSQL
serviceAccount:
  create: true
  name: tme-postgresql-service-account
  annotations: {}
  imagePullSecrets:
    - name: jpuv-onartifactory-ci-west
  automountServiceAccountToken: true

## Creates role for ServiceAccount
rbac:
  create: true
  rules:
    - apiGroups: [""]
      resources: ["pods", "services"]
      verbs: ["get", "list", "watch"]

## Pod Security Policy
psp:
  create: false

## @section Metrics Parameters
metrics:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/postgres-exporter
    tag: 0.11.1-debian-11-r60
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  customMetrics: {}
  extraEnvVars: []
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true
  livenessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  startupProbe:
    enabled: false
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  containerPorts:
    metrics: 9187
  resources:
    limits: {}
    requests: {}
  service:
    ports:
      metrics: 9187
    clusterIP: ""
    sessionAffinity: None
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "{{ .Values.metrics.service.ports.metrics }}"
  serviceMonitor:
    enabled: false
    namespace: ""
    interval: ""
    scrapeTimeout: ""
    labels: {}
    selector: {}
    relabelings: []
    metricRelabelings: []
    honorLabels: false
    jobLabel: ""
  prometheusRule:
    enabled: false
    namespace: ""
    labels: {}
    rules: []